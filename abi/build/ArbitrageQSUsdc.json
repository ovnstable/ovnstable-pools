{
  "address": "0x99A8cCf9F1dd4920A34cfb6E6AD33d10d3d7483b",
  "abi": [
    {
      "inputs": [],
      "name": "balancerVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "balancesQsPool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "reserve0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserve1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserve0Normalized",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserve1Normalized",
              "type": "uint256"
            }
          ],
          "internalType": "struct IArbitrageQSUsdc.Balances",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "changePriceBoundDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "qsPool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "usdc",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "usdPlus",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lowerChangePriceBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperChangePriceBound",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "qsRouter",
              "type": "address"
            }
          ],
          "internalType": "struct IArbitrageQSUsdc.Params",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "fix",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "qsPool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "usdc",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "usdPlus",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lowerChangePriceBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperChangePriceBound",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "qsRouter",
              "type": "address"
            }
          ],
          "internalType": "struct IArbitrageQSUsdc.Params",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "fixByFlash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "qsPool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "usdc",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "usdPlus",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lowerChangePriceBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperChangePriceBound",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "qsRouter",
              "type": "address"
            }
          ],
          "internalType": "struct IArbitrageQSUsdc.Params",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "getFixParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "skip",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "putUsdPlusToPool",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token0",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "token1",
                  "type": "address"
                }
              ],
              "internalType": "struct IArbitrageQSUsdc.Tokens",
              "name": "tokens",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "reserve0",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "reserve1",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "reserve2",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "reserve3",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IArbitrageQSUsdc.Reserves",
              "name": "reserves",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "usdc",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "usdPlus",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "qsRouter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "usdcIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "usdcOut",
              "type": "uint256"
            }
          ],
          "internalType": "struct IArbitrageQSUsdc.FixParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getSampleTargets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "reserve0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserve1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserve0Normalized",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserve1Normalized",
              "type": "uint256"
            }
          ],
          "internalType": "struct IArbitrageQSUsdc.Balances",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "feeAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        }
      ],
      "name": "receiveFlashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1f49eb7fddf95c0abc2a1dfa68339023195ea5ac5fff94771b26808400a6810f",
  "receipt": {
    "to": null,
    "from": "0x5CB01385d3097b6a189d1ac8BA3364D900666445",
    "contractAddress": "0x99A8cCf9F1dd4920A34cfb6E6AD33d10d3d7483b",
    "transactionIndex": 0,
    "gasUsed": "2529396",
    "logsBloom": "0x
    "blockHash": "0x6bff278941b18db891cf2d3752b6e0bcfa955f304a245b02f03073b912c8c59b",
    "transactionHash": "0x1f49eb7fddf95c0abc2a1dfa68339023195ea5ac5fff94771b26808400a6810f",
    "logs": [],
    "blockNumber": 27850307,
    "cumulativeGasUsed": "2529396",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "038281e5f034b96c056fc9b60920101b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"balancerVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"balancesQsPool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve0Normalized\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1Normalized\",\"type\":\"uint256\"}],\"internalType\":\"struct IArbitrageQSUsdc.Balances\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changePriceBoundDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"qsPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdPlus\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lowerChangePriceBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperChangePriceBound\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"qsRouter\",\"type\":\"address\"}],\"internalType\":\"struct IArbitrageQSUsdc.Params\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"fix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"qsPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdPlus\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lowerChangePriceBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperChangePriceBound\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"qsRouter\",\"type\":\"address\"}],\"internalType\":\"struct IArbitrageQSUsdc.Params\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"fixByFlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"qsPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdPlus\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lowerChangePriceBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperChangePriceBound\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"qsRouter\",\"type\":\"address\"}],\"internalType\":\"struct IArbitrageQSUsdc.Params\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"getFixParams\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"skip\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"putUsdPlusToPool\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"internalType\":\"struct IArbitrageQSUsdc.Tokens\",\"name\":\"tokens\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve3\",\"type\":\"uint256\"}],\"internalType\":\"struct IArbitrageQSUsdc.Reserves\",\"name\":\"reserves\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdPlus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"qsRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdcIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcOut\",\"type\":\"uint256\"}],\"internalType\":\"struct IArbitrageQSUsdc.FixParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getSampleTargets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve0Normalized\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1Normalized\",\"type\":\"uint256\"}],\"internalType\":\"struct IArbitrageQSUsdc.Balances\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"receiveFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"receiveFlashLoan(address[],uint256[],uint256[],bytes)\":{\"details\":\"When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient. At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the Vault, or else the entire flash loan will revert. `userData` is the same value passed in the `IVault.flashLoan` call.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ArbitrageQSUsdc.sol\":\"ArbitrageQSUsdc\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ArbitrageQSUsdc.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LogExpMath.sol\\\";\\nimport \\\"./Math.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./interfaces/IExchange.sol\\\";\\nimport \\\"./interfaces/IUsdPlusToken.sol\\\";\\nimport \\\"./interfaces/IFlashLoanRecipient.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IArbitrageQSUsdc.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n\\ncontract ArbitrageQSUsdc is IArbitrageQSUsdc, IFlashLoanRecipient {\\n    using LogExpMath for uint256;\\n    using SafeMath for uint160;\\n    using SafeMath for uint256;\\n\\n    address constant public balancerVault = 0xBA12222222228d8Ba445958a75a0704d566BF2C8;\\n\\n\\n    uint256 constant public changePriceBoundDenominator = 10 ** 6;\\n\\n    function getFixParams(Params memory params) public view override returns (FixParams memory) {\\n\\n        bool isUsdPlusLeft = IUniswapV2Pair(params.qsPool).token0() == params.usdPlus;\\n\\n\\n        Balances memory balancesCurrent = balancesQsPool(params.qsPool);\\n        Balances memory balancesTarget = getSampleTargets(params.qsPool);\\n\\n\\n        console.log(\\\"balancesTarget.reserve0Normalized:  \\\", balancesTarget.reserve0Normalized);\\n        console.log(\\\"balancesTarget.reserve1Normalized:  \\\", balancesTarget.reserve1Normalized);\\n        console.log(\\\"balancesCurrent.reserve0Normalized: \\\", balancesCurrent.reserve0Normalized);\\n        console.log(\\\"balancesCurrent.reserve1Normalized: \\\", balancesCurrent.reserve1Normalized);\\n\\n        uint256 changePrice = 10 ** 18;\\n        changePrice = changePrice * balancesTarget.reserve0Normalized;\\n        changePrice = changePrice / balancesTarget.reserve1Normalized;\\n        changePrice = changePrice * balancesCurrent.reserve1Normalized;\\n        changePrice = changePrice / balancesCurrent.reserve0Normalized;\\n\\n        console.log(\\\"changePrice: \\\", changePrice);\\n\\n        if (params.lowerChangePriceBound < changePrice && changePrice < params.upperChangePriceBound) {\\n            return FixParams({\\n            skip : true,\\n            putUsdPlusToPool : false,\\n            tokens : Tokens(address(0), address(0)),\\n            reserves : Reserves(uint256(0), 0, 0, 0),\\n            usdc : address(0),\\n            usdPlus : address(0),\\n            qsRouter : address(0),\\n            usdcIn : 0,\\n            usdcOut : 0\\n            });\\n        }\\n\\n        console.log(\\\"balancesTarget.reserve0:  \\\", balancesTarget.reserve0);\\n        console.log(\\\"balancesTarget.reserve1:  \\\", balancesTarget.reserve1);\\n        console.log(\\\"balancesCurrent.reserve0: \\\", balancesCurrent.reserve0);\\n        console.log(\\\"balancesCurrent.reserve1: \\\", balancesCurrent.reserve1);\\n\\n        uint256 rCur0 = balancesCurrent.reserve0;\\n        uint256 rCur1 = balancesCurrent.reserve1;\\n        uint256 rTar0 = balancesTarget.reserve0;\\n        uint256 rTar1 = balancesTarget.reserve1;\\n\\n        FixParams memory fixParams;\\n\\n        if (isUsdPlusLeft) {\\n            if (changePrice < 10 ** 18) {\\n                // amount usd+ more than should be, so need to put usdc in pool and get usd+ from\\n\\n                fixParams = FixParams({\\n                skip : false,\\n                putUsdPlusToPool : false,\\n                tokens : Tokens(params.usdc, params.usdPlus),\\n                reserves : Reserves(rCur1, rCur0, rTar1, rTar0),\\n                usdc : params.usdc,\\n                usdPlus : params.usdPlus,\\n                qsRouter : params.qsRouter,\\n                usdcIn : 0,\\n                usdcOut : 0\\n                });\\n            } else {\\n                fixParams = FixParams({\\n                skip : false,\\n                putUsdPlusToPool : true,\\n                tokens : Tokens(params.usdPlus, params.usdc),\\n                reserves : Reserves(rCur0, rCur1, rTar0, rTar1),\\n                usdc : params.usdc,\\n                usdPlus : params.usdPlus,\\n                qsRouter : params.qsRouter,\\n                usdcIn : 0,\\n                usdcOut : 0\\n                });\\n            }\\n        } else {\\n            if (changePrice < 10 ** 18) {\\n                fixParams = FixParams({\\n                skip : false,\\n                putUsdPlusToPool : true,\\n                tokens : Tokens(params.usdPlus, params.usdc),\\n                reserves : Reserves(rCur1, rCur0, rTar1, rTar0),\\n                usdc : params.usdc,\\n                usdPlus : params.usdPlus,\\n                qsRouter : params.qsRouter,\\n                usdcIn : 0,\\n                usdcOut : 0\\n                });\\n\\n            } else {\\n                fixParams = FixParams({\\n                skip : false,\\n                putUsdPlusToPool : false,\\n                tokens : Tokens(params.usdc, params.usdPlus),\\n                reserves : Reserves(rCur0, rCur1, rTar0, rTar1),\\n                usdc : params.usdc,\\n                usdPlus : params.usdPlus,\\n                qsRouter : params.qsRouter,\\n                usdcIn : 0,\\n                usdcOut : 0\\n                });\\n            }\\n        }\\n\\n\\n        if (fixParams.putUsdPlusToPool) {\\n            (\\n            fixParams.usdcIn,\\n            fixParams.usdcOut\\n            ) = putUsdPlusToPoolGetUsdcIn(\\n                fixParams,\\n                fixParams.tokens.token0,\\n                fixParams.tokens.token1,\\n                fixParams.reserves.reserve0,\\n                fixParams.reserves.reserve1,\\n                fixParams.reserves.reserve2,\\n                fixParams.reserves.reserve3\\n            );\\n        } else {\\n            (\\n            fixParams.usdcIn,\\n            fixParams.usdcOut\\n            ) = pullUsdPlusFromPoolGetUsdcIn(\\n                fixParams,\\n                fixParams.tokens.token0,\\n                fixParams.tokens.token1,\\n                fixParams.reserves.reserve0,\\n                fixParams.reserves.reserve1,\\n                fixParams.reserves.reserve2,\\n                fixParams.reserves.reserve3\\n            );\\n        }\\n\\n        return fixParams;\\n    }\\n\\n    function balancesQsPool(address pool) public view override returns (Balances memory) {\\n        (uint112 reserve0, uint112 reserve1,) = IUniswapV2Pair(pool).getReserves();\\n\\n        address token0Address = IUniswapV2Pair(pool).token0();\\n        address token1Address = IUniswapV2Pair(pool).token1();\\n\\n        uint256 token0Decimals = IERC20(token0Address).decimals();\\n        uint256 token1Decimals = IERC20(token1Address).decimals();\\n\\n        // up to e18\\n        uint256 reserve0Normalized = reserve0 * 10 ** (18 - token0Decimals);\\n        uint256 reserve1Normalized = reserve1 * 10 ** (18 - token1Decimals);\\n\\n        return Balances({\\n        reserve0 : reserve0,\\n        reserve1 : reserve1,\\n        reserve0Normalized : reserve0Normalized,\\n        reserve1Normalized : reserve1Normalized\\n        });\\n    }\\n\\n    function getSampleTargets(address pool) public view override returns (Balances memory) {\\n        address token0Address = IUniswapV2Pair(pool).token0();\\n        address token1Address = IUniswapV2Pair(pool).token1();\\n\\n        uint256 token0Decimals = IERC20(token0Address).decimals();\\n        uint256 token1Decimals = IERC20(token1Address).decimals();\\n\\n        uint256 reserve0 = 10 ** token0Decimals;\\n        uint256 reserve1 = 10 ** token1Decimals;\\n\\n        return Balances({\\n        reserve0 : reserve0,\\n        reserve1 : reserve1,\\n        reserve0Normalized : 10 ** 18,\\n        reserve1Normalized : 10 ** 18\\n        });\\n    }\\n\\n\\n    function fix(Params memory params) public override {\\n        FixParams memory fixParams = getFixParams(params);\\n        _fix(fixParams);\\n        IERC20(params.usdc).transfer(msg.sender, IERC20(params.usdc).balanceOf(address(this)));\\n    }\\n\\n    function _fix(FixParams memory fixParams) internal {\\n        if (fixParams.putUsdPlusToPool) {\\n            putUsdPlusToPool(\\n                fixParams,\\n                fixParams.tokens.token0,\\n                fixParams.tokens.token1,\\n                fixParams.reserves.reserve0,\\n                fixParams.reserves.reserve1,\\n                fixParams.reserves.reserve2,\\n                fixParams.reserves.reserve3\\n            );\\n        } else {\\n            pullUsdPlusFromPool(\\n                fixParams,\\n                fixParams.tokens.token0,\\n                fixParams.tokens.token1,\\n                fixParams.reserves.reserve0,\\n                fixParams.reserves.reserve1,\\n                fixParams.reserves.reserve2,\\n                fixParams.reserves.reserve3\\n            );\\n        }\\n    }\\n\\n    function putUsdPlusToPoolGetUsdcIn(\\n        FixParams memory params,\\n        address token0, address token1,\\n        uint256 rIn0, uint256 rOut0, uint256 rIn1, uint256 rOut1\\n    ) internal view returns (uint256, uint256){\\n\\n        uint256 aIn = calcAInForQS(rIn0, rOut0, rIn1, rOut1);\\n        console.log(\\\"aIn: \\\", aIn);\\n\\n        uint256 usdcIn = calcAInForWrap(aIn);\\n        uint256 usdcOut = calcAOutForQS(usdcIn, rIn0, rOut0);\\n\\n        return (usdcIn, usdcOut);\\n    }\\n\\n    function pullUsdPlusFromPoolGetUsdcIn(\\n        FixParams memory params,\\n        address token0, address token1,\\n        uint256 rIn0, uint256 rOut0, uint256 rIn1, uint256 rOut1\\n    ) internal view returns (uint256, uint256){\\n\\n        uint256 aIn = calcAInForQS(rIn0, rOut0, rIn1, rOut1);\\n        console.log(\\\"aIn: \\\", aIn);\\n\\n        uint256 usdcIn = aIn;\\n        uint256 usdcOut = calcAOutOnWrap(calcAOutForQS(aIn, rIn0, rOut0));\\n\\n        return (usdcIn, usdcOut);\\n    }\\n\\n    function putUsdPlusToPool(\\n        FixParams memory params,\\n        address token0, address token1,\\n        uint256 rIn0, uint256 rOut0, uint256 rIn1, uint256 rOut1\\n    ) internal {\\n\\n        uint256 aIn = calcAInForQS(rIn0, rOut0, rIn1, rOut1);\\n        console.log(\\\"aIn: \\\", aIn);\\n\\n        uint256 usdcIn = calcAInForWrap(aIn);\\n        uint256 usdcOut = calcAOutForQS(usdcIn, rIn0, rOut0);\\n\\n        uint256 E3 = 10 ** 3;\\n        require(aIn > E3, \\\"aIn too low, skip actions\\\");\\n\\n        chain_WR_QS(params, token0, token1, usdcIn);\\n    }\\n\\n    function pullUsdPlusFromPool(\\n        FixParams memory params,\\n        address token0, address token1,\\n        uint256 rIn0, uint256 rOut0, uint256 rIn1, uint256 rOut1\\n    ) internal {\\n\\n        uint256 aIn = calcAInForQS(rIn0, rOut0, rIn1, rOut1);\\n        console.log(\\\"aIn: \\\", aIn);\\n\\n        uint256 usdcIn = aIn;\\n        uint256 usdcOut = calcAOutOnWrap(calcAOutForQS(aIn, rIn0, rOut0));\\n\\n        uint256 E3 = 10 ** 3;\\n        require(aIn > E3, \\\"aIn too low, skip actions\\\");\\n\\n        chain_QS_UN(params, token0, token1, usdcIn);\\n    }\\n\\n    function chain_QS_UN(\\n        FixParams memory params,\\n        address token0, address token1,\\n        uint256 usdcIn\\n    ) internal {\\n        uint256 token1Received = swapQS(params, token0, token1, usdcIn);\\n        uint256 usdcOut = unwrap(params, token1Received);\\n    }\\n\\n    function chain_WR_QS(\\n        FixParams memory params,\\n        address token0, address token1,\\n        uint256 usdcIn\\n    ) internal {\\n        uint256 token0Received = wrap(params, usdcIn);\\n        uint256 usdcOut = swapQS(params, token0, token1, token0Received);\\n    }\\n\\n\\n    function calcAInForQS(\\n        uint256 rIn0, uint256 rOut0, uint256 rIn1, uint256 rOut1\\n    ) internal view returns (uint256){\\n\\n        uint256 t1 = rIn0.mul(3988000).mul(rOut0).mul(rIn1).div(rOut1);\\n        uint256 t2 = rIn0.mul(9).mul(rIn0);\\n        uint256 t3 = rIn0.mul(5982);\\n\\n        uint256 underSqrt = t1.add(t2).add(994009).sub(t3);\\n        uint256 tSqrt = sqrt(underSqrt);\\n        uint256 t4 = rIn0.mul(1997);\\n        uint256 nominator0 = uint256(997).add(tSqrt).sub(t4);\\n        uint256 result0 = nominator0.div(1994);\\n\\n        return result0;\\n    }\\n\\n    function calcAOutForQS(\\n        uint256 aIn, uint256 rIn0, uint256 rOut0\\n    ) internal view returns (uint256){\\n\\n        uint256 _997 = 997;\\n        uint256 _1000 = 1000;\\n\\n        uint256 amountInWithFee = aIn.mul(_997);\\n        uint256 numerator = amountInWithFee.mul(rOut0);\\n        uint256 denominator = rIn0.mul(_1000).add(amountInWithFee);\\n        uint256 amountOut = numerator.div(denominator);\\n\\n        return amountOut;\\n    }\\n\\n    function calcAInForWrap(uint256 aOut) internal view returns (uint256){\\n        return aOut.mul(10000).div(9996);\\n    }\\n\\n    function calcAOutOnWrap(uint256 aIn) internal view returns (uint256){\\n        return aIn.mul(10000).div(9996);\\n    }\\n\\n    function sqrt(uint256 x) internal view returns (uint256 y) {\\n        uint256 z = (x + 1) / 2;\\n        y = x;\\n        while (z < y) {\\n            y = z;\\n            z = (x / z + z) / 2;\\n        }\\n    }\\n\\n\\n    function wrap(FixParams memory params, uint256 amountIn) internal returns (uint256) {\\n        address exchange = IUsdPlusToken(params.usdPlus).exchange();\\n        IERC20(params.usdc).approve(exchange, amountIn);\\n        uint256 result = IExchange(exchange).buy(params.usdc, amountIn);\\n        return result;\\n    }\\n\\n    function unwrap(FixParams memory params, uint256 amountIn) internal returns (uint256) {\\n        address exchange = IUsdPlusToken(params.usdPlus).exchange();\\n        IERC20(params.usdPlus).approve(exchange, amountIn);\\n        uint256 result = IExchange(exchange).redeem(params.usdc, amountIn);\\n        return result;\\n    }\\n\\n    function swapQS(FixParams memory params, address tokenIn, address tokenOut, uint256 amountIn) internal returns (uint256) {\\n        IERC20(tokenIn).approve(params.qsRouter, amountIn);\\n        address[] memory path = new address[](2);\\n        path[0] = tokenIn;\\n        path[1] = tokenOut;\\n        uint256[] memory result = IUniswapV2Router02(params.qsRouter).swapExactTokensForTokens(\\n            amountIn,\\n            0,\\n            path,\\n            address(this),\\n            type(uint256).max\\n        );\\n        return result[1];\\n    }\\n\\n\\n    function fixByFlash(Params memory params) public override {\\n        FixParams memory fixParams = getFixParams(params);\\n\\n        uint256 usdcIn = fixParams.usdcIn;\\n        uint256 usdcOut = fixParams.usdcOut;\\n        require(usdcOut >= usdcIn, \\\"UsdcOut should be more UsdcIn\\\");\\n\\n\\n        uint256 amountUsdcBefore = IERC20(params.usdc).balanceOf(address(this));\\n        console.log(\\\"amountUsdcBefore: \\\", amountUsdcBefore);\\n\\n        bytes memory userData = abi.encode(\\n            fixParams,\\n            amountUsdcBefore,\\n            msg.sender // \\u043a\\u0442\\u043e \\u0438\\u043d\\u0438\\u0446\\u0438\\u0438\\u0440\\u043e\\u0432\\u0430\\u043b\\n        );\\n\\n\\n        IERC20[] memory tokens = new IERC20[](1);\\n        tokens[0] = IERC20(fixParams.usdc);\\n        uint256[] memory amounts = new uint256[](1);\\n        amounts[0] = fixParams.usdcIn;\\n\\n        IVault(balancerVault).flashLoan(\\n            this,\\n            tokens,\\n            amounts,\\n            userData\\n        );\\n\\n        uint256 amountUsdcAfter = IERC20(params.usdc).balanceOf(address(this));\\n        console.log(\\\"amountUsdcAfter: \\\", amountUsdcAfter);\\n        IERC20(params.usdc).transfer(msg.sender, amountUsdcAfter);\\n\\n    }\\n\\n\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external override {\\n\\n        require(tokens.length == 1, \\\"Only one token should be in flash\\\");\\n\\n        (\\n        FixParams memory fixParams,\\n        uint256 amountUsdcBefore,\\n        address msgSender // \\u043a\\u0442\\u043e \\u0438\\u043d\\u0438\\u0446\\u0438\\u0438\\u0440\\u043e\\u0432\\u0430\\u043b\\n        ) = abi.decode(\\n            userData,\\n            (FixParams, uint256, address)\\n        );\\n\\n        require(address(tokens[0]) == fixParams.usdc, \\\"Only USDC token should be in flash\\\");\\n        require(feeAmounts[0] == 0, \\\"Only zero fee acceptable\\\");\\n\\n        uint256 currentUsdc = IERC20(fixParams.usdc).balanceOf(address(this));\\n        require(currentUsdc >= fixParams.usdcIn + amountUsdcBefore, \\\"Not enough usdc send to flash\\\");\\n\\n        _fix(fixParams);\\n\\n        IERC20(fixParams.usdc).transfer(balancerVault, fixParams.usdcIn);\\n\\n    }\\n}\\n\",\"keccak256\":\"0x605d36dfdd23d229227fca081695dc38fb9cade0aae75a82ca0144fbec0b0644\",\"license\":\"Unlicense\"},\"contracts/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.4.0;\\r\\n\\r\\n/// @title Contains 512-bit math functions\\r\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\r\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\r\\nlibrary FullMath {\\r\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n    /// @param a The multiplicand\\r\\n    /// @param b The multiplier\\r\\n    /// @param denominator The divisor\\r\\n    /// @return result The 256-bit result\\r\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\r\\n    function mulDiv(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        uint256 denominator\\r\\n    ) internal pure returns (uint256 result) {\\r\\n        // 512-bit multiply [prod1 prod0] = a * b\\r\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\r\\n        // then use the Chinese Remainder Theorem to reconstruct\\r\\n        // the 512 bit result. The result is stored in two 256\\r\\n        // variables such that product = prod1 * 2**256 + prod0\\r\\n        uint256 prod0; // Least significant 256 bits of the product\\r\\n        uint256 prod1; // Most significant 256 bits of the product\\r\\n        assembly {\\r\\n            let mm := mulmod(a, b, not(0))\\r\\n            prod0 := mul(a, b)\\r\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n        }\\r\\n\\r\\n        // Handle non-overflow cases, 256 by 256 division\\r\\n        if (prod1 == 0) {\\r\\n            require(denominator > 0);\\r\\n            assembly {\\r\\n                result := div(prod0, denominator)\\r\\n            }\\r\\n            return result;\\r\\n        }\\r\\n\\r\\n        // Make sure the result is less than 2**256.\\r\\n        // Also prevents denominator == 0\\r\\n        require(denominator > prod1);\\r\\n\\r\\n        ///////////////////////////////////////////////\\r\\n        // 512 by 256 division.\\r\\n        ///////////////////////////////////////////////\\r\\n\\r\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\r\\n        // Compute remainder using mulmod\\r\\n        uint256 remainder;\\r\\n        assembly {\\r\\n            remainder := mulmod(a, b, denominator)\\r\\n        }\\r\\n        // Subtract 256 bit number from 512 bit number\\r\\n        assembly {\\r\\n            prod1 := sub(prod1, gt(remainder, prod0))\\r\\n            prod0 := sub(prod0, remainder)\\r\\n        }\\r\\n\\r\\n        // Factor powers of two out of denominator\\r\\n        // Compute largest power of two divisor of denominator.\\r\\n        // Always >= 1.\\r\\n        int256 _temp = int256(denominator);\\r\\n        int256 _twos = -_temp & _temp;\\r\\n        uint256 twos = uint256(_twos);\\r\\n        // Divide denominator by power of two\\r\\n        assembly {\\r\\n            denominator := div(denominator, twos)\\r\\n        }\\r\\n\\r\\n        // Divide [prod1 prod0] by the factors of two\\r\\n        assembly {\\r\\n            prod0 := div(prod0, twos)\\r\\n        }\\r\\n        // Shift in bits from prod1 into prod0. For this we need\\r\\n        // to flip `twos` such that it is 2**256 / twos.\\r\\n        // If twos is zero, then it becomes one\\r\\n        assembly {\\r\\n            twos := add(div(sub(0, twos), twos), 1)\\r\\n        }\\r\\n        prod0 |= prod1 * twos;\\r\\n\\r\\n        // Invert denominator mod 2**256\\r\\n        // Now that denominator is an odd number, it has an inverse\\r\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\r\\n        // Compute the inverse by starting with a seed that is correct\\r\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\r\\n        uint256 inv = (3 * denominator) ^ 2;\\r\\n        // Now use Newton-Raphson iteration to improve the precision.\\r\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\r\\n        // arithmetic, doubling the correct bits in each step.\\r\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\r\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\r\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\r\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\r\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\r\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\r\\n\\r\\n        // Because the division is now exact we can divide by multiplying\\r\\n        // with the modular inverse of denominator. This will give us the\\r\\n        // correct result modulo 2**256. Since the precoditions guarantee\\r\\n        // that the outcome is less than 2**256, this is the final result.\\r\\n        // We don't need to compute the high bits of the result and prod1\\r\\n        // is no longer required.\\r\\n        result = prod0 * inv;\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n    /// @param a The multiplicand\\r\\n    /// @param b The multiplier\\r\\n    /// @param denominator The divisor\\r\\n    /// @return result The 256-bit result\\r\\n    function mulDivRoundingUp(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        uint256 denominator\\r\\n    ) internal pure returns (uint256 result) {\\r\\n        result = mulDiv(a, b, denominator);\\r\\n        if (mulmod(a, b, denominator) > 0) {\\r\\n            require(result < type(uint256).max);\\r\\n            result++;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb0f6700adfc85a8f3a3980ae0189776ad88301aa927e351a342599adefc6d21b\",\"license\":\"MIT\"},\"contracts/LogExpMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\\r\\n// documentation files (the \\u201cSoftware\\u201d), to deal in the Software without restriction, including without limitation the\\r\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\\r\\n// permit persons to whom the Software is furnished to do so, subject to the following conditions:\\r\\n\\r\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\\r\\n// Software.\\r\\n\\r\\n// THE SOFTWARE IS PROVIDED \\u201cAS IS\\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\\r\\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\\r\\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\\r\\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\r\\n\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n\\r\\n/* solhint-disable */\\r\\n\\r\\n/**\\r\\n * @dev Exponentiation and logarithm functions for 18 decimal fixed point numbers (both base and exponent/argument).\\r\\n *\\r\\n * Exponentiation and logarithm with arbitrary bases (x^y and log_x(y)) are implemented by conversion to natural\\r\\n * exponentiation and logarithm (where the base is Euler's number).\\r\\n *\\r\\n * @author Fernando Martinelli - @fernandomartinelli\\r\\n * @author Sergio Yuhjtman - @sergioyuhjtman\\r\\n * @author Daniel Fernandez - @dmf7z\\r\\n */\\r\\nlibrary LogExpMath {\\r\\n    // All fixed point multiplications and divisions are inlined. This means we need to divide by ONE when multiplying\\r\\n    // two numbers, and multiply by ONE when dividing them.\\r\\n\\r\\n    // All arguments and return values are 18 decimal fixed point numbers.\\r\\n    int256 constant ONE_18 = 1e18;\\r\\n\\r\\n    // Internally, intermediate values are computed with higher precision as 20 decimal fixed point numbers, and in the\\r\\n    // case of ln36, 36 decimals.\\r\\n    int256 constant ONE_20 = 1e20;\\r\\n    int256 constant ONE_36 = 1e36;\\r\\n\\r\\n    // The domain of natural exponentiation is bound by the word size and number of decimals used.\\r\\n    //\\r\\n    // Because internally the result will be stored using 20 decimals, the largest possible result is\\r\\n    // (2^255 - 1) / 10^20, which makes the largest exponent ln((2^255 - 1) / 10^20) = 130.700829182905140221.\\r\\n    // The smallest possible result is 10^(-18), which makes largest negative argument\\r\\n    // ln(10^(-18)) = -41.446531673892822312.\\r\\n    // We use 130.0 and -41.0 to have some safety margin.\\r\\n    int256 constant MAX_NATURAL_EXPONENT = 130e18;\\r\\n    int256 constant MIN_NATURAL_EXPONENT = -41e18;\\r\\n\\r\\n    // Bounds for ln_36's argument. Both ln(0.9) and ln(1.1) can be represented with 36 decimal places in a fixed point\\r\\n    // 256 bit integer.\\r\\n    int256 constant LN_36_LOWER_BOUND = ONE_18 - 1e17;\\r\\n    int256 constant LN_36_UPPER_BOUND = ONE_18 + 1e17;\\r\\n\\r\\n    uint256 constant MILD_EXPONENT_BOUND = 2**254 / uint256(ONE_20);\\r\\n\\r\\n    // 18 decimal constants\\r\\n    int256 constant x0 = 128000000000000000000; // 2\\u02c67\\r\\n    int256 constant a0 = 38877084059945950922200000000000000000000000000000000000; // e\\u02c6(x0) (no decimals)\\r\\n    int256 constant x1 = 64000000000000000000; // 2\\u02c66\\r\\n    int256 constant a1 = 6235149080811616882910000000; // e\\u02c6(x1) (no decimals)\\r\\n\\r\\n    // 20 decimal constants\\r\\n    int256 constant x2 = 3200000000000000000000; // 2\\u02c65\\r\\n    int256 constant a2 = 7896296018268069516100000000000000; // e\\u02c6(x2)\\r\\n    int256 constant x3 = 1600000000000000000000; // 2\\u02c64\\r\\n    int256 constant a3 = 888611052050787263676000000; // e\\u02c6(x3)\\r\\n    int256 constant x4 = 800000000000000000000; // 2\\u02c63\\r\\n    int256 constant a4 = 298095798704172827474000; // e\\u02c6(x4)\\r\\n    int256 constant x5 = 400000000000000000000; // 2\\u02c62\\r\\n    int256 constant a5 = 5459815003314423907810; // e\\u02c6(x5)\\r\\n    int256 constant x6 = 200000000000000000000; // 2\\u02c61\\r\\n    int256 constant a6 = 738905609893065022723; // e\\u02c6(x6)\\r\\n    int256 constant x7 = 100000000000000000000; // 2\\u02c60\\r\\n    int256 constant a7 = 271828182845904523536; // e\\u02c6(x7)\\r\\n    int256 constant x8 = 50000000000000000000; // 2\\u02c6-1\\r\\n    int256 constant a8 = 164872127070012814685; // e\\u02c6(x8)\\r\\n    int256 constant x9 = 25000000000000000000; // 2\\u02c6-2\\r\\n    int256 constant a9 = 128402541668774148407; // e\\u02c6(x9)\\r\\n    int256 constant x10 = 12500000000000000000; // 2\\u02c6-3\\r\\n    int256 constant a10 = 113314845306682631683; // e\\u02c6(x10)\\r\\n    int256 constant x11 = 6250000000000000000; // 2\\u02c6-4\\r\\n    int256 constant a11 = 106449445891785942956; // e\\u02c6(x11)\\r\\n\\r\\n    /**\\r\\n     * @dev Exponentiation (x^y) with unsigned 18 decimal fixed point base and exponent.\\r\\n     *\\r\\n     * Reverts if ln(x) * y is smaller than `MIN_NATURAL_EXPONENT`, or larger than `MAX_NATURAL_EXPONENT`.\\r\\n     */\\r\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        if (y == 0) {\\r\\n            // We solve the 0^0 indetermination by making it equal one.\\r\\n            return uint256(ONE_18);\\r\\n        }\\r\\n\\r\\n        if (x == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // Instead of computing x^y directly, we instead rely on the properties of logarithms and exponentiation to\\r\\n        // arrive at that result. In particular, exp(ln(x)) = x, and ln(x^y) = y * ln(x). This means\\r\\n        // x^y = exp(y * ln(x)).\\r\\n\\r\\n        // The ln function takes a signed value, so we need to make sure x fits in the signed 256 bit range.\\r\\n        require(x < 2**255, \\\"Errors.X_OUT_OF_BOUNDS\\\");\\r\\n        int256 x_int256 = int256(x);\\r\\n\\r\\n        // We will compute y * ln(x) in a single step. Depending on the value of x, we can either use ln or ln_36. In\\r\\n        // both cases, we leave the division by ONE_18 (due to fixed point multiplication) to the end.\\r\\n\\r\\n        // This prevents y * ln(x) from overflowing, and at the same time guarantees y fits in the signed 256 bit range.\\r\\n        require(y < MILD_EXPONENT_BOUND, \\\"Errors.Y_OUT_OF_BOUNDS\\\");\\r\\n        int256 y_int256 = int256(y);\\r\\n\\r\\n        int256 logx_times_y;\\r\\n        if (LN_36_LOWER_BOUND < x_int256 && x_int256 < LN_36_UPPER_BOUND) {\\r\\n            int256 ln_36_x = _ln_36(x_int256);\\r\\n\\r\\n            // ln_36_x has 36 decimal places, so multiplying by y_int256 isn't as straightforward, since we can't just\\r\\n            // bring y_int256 to 36 decimal places, as it might overflow. Instead, we perform two 18 decimal\\r\\n            // multiplications and add the results: one with the first 18 decimals of ln_36_x, and one with the\\r\\n            // (downscaled) last 18 decimals.\\r\\n            logx_times_y = ((ln_36_x / ONE_18) * y_int256 + ((ln_36_x % ONE_18) * y_int256) / ONE_18);\\r\\n        } else {\\r\\n            logx_times_y = _ln(x_int256) * y_int256;\\r\\n        }\\r\\n        logx_times_y /= ONE_18;\\r\\n\\r\\n        // Finally, we compute exp(y * ln(x)) to arrive at x^y\\r\\n        require(\\r\\n            MIN_NATURAL_EXPONENT <= logx_times_y && logx_times_y <= MAX_NATURAL_EXPONENT,\\r\\n            \\\"Errors.PRODUCT_OUT_OF_BOUNDS\\\"\\r\\n        );\\r\\n\\r\\n        return uint256(exp(logx_times_y));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Natural exponentiation (e^x) with signed 18 decimal fixed point exponent.\\r\\n     *\\r\\n     * Reverts if `x` is smaller than MIN_NATURAL_EXPONENT, or larger than `MAX_NATURAL_EXPONENT`.\\r\\n     */\\r\\n    function exp(int256 x) internal pure returns (int256) {\\r\\n        require(x >= MIN_NATURAL_EXPONENT && x <= MAX_NATURAL_EXPONENT, \\\"Errors.INVALID_EXPONENT\\\");\\r\\n\\r\\n        if (x < 0) {\\r\\n            // We only handle positive exponents: e^(-x) is computed as 1 / e^x. We can safely make x positive since it\\r\\n            // fits in the signed 256 bit range (as it is larger than MIN_NATURAL_EXPONENT).\\r\\n            // Fixed point division requires multiplying by ONE_18.\\r\\n            return ((ONE_18 * ONE_18) / exp(-x));\\r\\n        }\\r\\n\\r\\n        // First, we use the fact that e^(x+y) = e^x * e^y to decompose x into a sum of powers of two, which we call x_n,\\r\\n        // where x_n == 2^(7 - n), and e^x_n = a_n has been precomputed. We choose the first x_n, x0, to equal 2^7\\r\\n        // because all larger powers are larger than MAX_NATURAL_EXPONENT, and therefore not present in the\\r\\n        // decomposition.\\r\\n        // At the end of this process we will have the product of all e^x_n = a_n that apply, and the remainder of this\\r\\n        // decomposition, which will be lower than the smallest x_n.\\r\\n        // exp(x) = k_0 * a_0 * k_1 * a_1 * ... + k_n * a_n * exp(remainder), where each k_n equals either 0 or 1.\\r\\n        // We mutate x by subtracting x_n, making it the remainder of the decomposition.\\r\\n\\r\\n        // The first two a_n (e^(2^7) and e^(2^6)) are too large if stored as 18 decimal numbers, and could cause\\r\\n        // intermediate overflows. Instead we store them as plain integers, with 0 decimals.\\r\\n        // Additionally, x0 + x1 is larger than MAX_NATURAL_EXPONENT, which means they will not both be present in the\\r\\n        // decomposition.\\r\\n\\r\\n        // For each x_n, we test if that term is present in the decomposition (if x is larger than it), and if so deduct\\r\\n        // it and compute the accumulated product.\\r\\n\\r\\n        int256 firstAN;\\r\\n        if (x >= x0) {\\r\\n            x -= x0;\\r\\n            firstAN = a0;\\r\\n        } else if (x >= x1) {\\r\\n            x -= x1;\\r\\n            firstAN = a1;\\r\\n        } else {\\r\\n            firstAN = 1; // One with no decimal places\\r\\n        }\\r\\n\\r\\n        // We now transform x into a 20 decimal fixed point number, to have enhanced precision when computing the\\r\\n        // smaller terms.\\r\\n        x *= 100;\\r\\n\\r\\n        // `product` is the accumulated product of all a_n (except a0 and a1), which starts at 20 decimal fixed point\\r\\n        // one. Recall that fixed point multiplication requires dividing by ONE_20.\\r\\n        int256 product = ONE_20;\\r\\n\\r\\n        if (x >= x2) {\\r\\n            x -= x2;\\r\\n            product = (product * a2) / ONE_20;\\r\\n        }\\r\\n        if (x >= x3) {\\r\\n            x -= x3;\\r\\n            product = (product * a3) / ONE_20;\\r\\n        }\\r\\n        if (x >= x4) {\\r\\n            x -= x4;\\r\\n            product = (product * a4) / ONE_20;\\r\\n        }\\r\\n        if (x >= x5) {\\r\\n            x -= x5;\\r\\n            product = (product * a5) / ONE_20;\\r\\n        }\\r\\n        if (x >= x6) {\\r\\n            x -= x6;\\r\\n            product = (product * a6) / ONE_20;\\r\\n        }\\r\\n        if (x >= x7) {\\r\\n            x -= x7;\\r\\n            product = (product * a7) / ONE_20;\\r\\n        }\\r\\n        if (x >= x8) {\\r\\n            x -= x8;\\r\\n            product = (product * a8) / ONE_20;\\r\\n        }\\r\\n        if (x >= x9) {\\r\\n            x -= x9;\\r\\n            product = (product * a9) / ONE_20;\\r\\n        }\\r\\n\\r\\n        // x10 and x11 are unnecessary here since we have high enough precision already.\\r\\n\\r\\n        // Now we need to compute e^x, where x is small (in particular, it is smaller than x9). We use the Taylor series\\r\\n        // expansion for e^x: 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!).\\r\\n\\r\\n        int256 seriesSum = ONE_20; // The initial one in the sum, with 20 decimal places.\\r\\n        int256 term; // Each term in the sum, where the nth term is (x^n / n!).\\r\\n\\r\\n        // The first term is simply x.\\r\\n        term = x;\\r\\n        seriesSum += term;\\r\\n\\r\\n        // Each term (x^n / n!) equals the previous one times x, divided by n. Since x is a fixed point number,\\r\\n        // multiplying by it requires dividing by ONE_20, but dividing by the non-fixed point n values does not.\\r\\n\\r\\n        term = ((term * x) / ONE_20) / 2;\\r\\n        seriesSum += term;\\r\\n\\r\\n        term = ((term * x) / ONE_20) / 3;\\r\\n        seriesSum += term;\\r\\n\\r\\n        term = ((term * x) / ONE_20) / 4;\\r\\n        seriesSum += term;\\r\\n\\r\\n        term = ((term * x) / ONE_20) / 5;\\r\\n        seriesSum += term;\\r\\n\\r\\n        term = ((term * x) / ONE_20) / 6;\\r\\n        seriesSum += term;\\r\\n\\r\\n        term = ((term * x) / ONE_20) / 7;\\r\\n        seriesSum += term;\\r\\n\\r\\n        term = ((term * x) / ONE_20) / 8;\\r\\n        seriesSum += term;\\r\\n\\r\\n        term = ((term * x) / ONE_20) / 9;\\r\\n        seriesSum += term;\\r\\n\\r\\n        term = ((term * x) / ONE_20) / 10;\\r\\n        seriesSum += term;\\r\\n\\r\\n        term = ((term * x) / ONE_20) / 11;\\r\\n        seriesSum += term;\\r\\n\\r\\n        term = ((term * x) / ONE_20) / 12;\\r\\n        seriesSum += term;\\r\\n\\r\\n        // 12 Taylor terms are sufficient for 18 decimal precision.\\r\\n\\r\\n        // We now have the first a_n (with no decimals), and the product of all other a_n present, and the Taylor\\r\\n        // approximation of the exponentiation of the remainder (both with 20 decimals). All that remains is to multiply\\r\\n        // all three (one 20 decimal fixed point multiplication, dividing by ONE_20, and one integer multiplication),\\r\\n        // and then drop two digits to return an 18 decimal value.\\r\\n\\r\\n        return (((product * seriesSum) / ONE_20) * firstAN) / 100;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Logarithm (log(arg, base), with signed 18 decimal fixed point base and argument.\\r\\n     */\\r\\n    function log(int256 arg, int256 base) internal pure returns (int256) {\\r\\n        // This performs a simple base change: log(arg, base) = ln(arg) / ln(base).\\r\\n\\r\\n        // Both logBase and logArg are computed as 36 decimal fixed point numbers, either by using ln_36, or by\\r\\n        // upscaling.\\r\\n\\r\\n        int256 logBase;\\r\\n        if (LN_36_LOWER_BOUND < base && base < LN_36_UPPER_BOUND) {\\r\\n            logBase = _ln_36(base);\\r\\n        } else {\\r\\n            logBase = _ln(base) * ONE_18;\\r\\n        }\\r\\n\\r\\n        int256 logArg;\\r\\n        if (LN_36_LOWER_BOUND < arg && arg < LN_36_UPPER_BOUND) {\\r\\n            logArg = _ln_36(arg);\\r\\n        } else {\\r\\n            logArg = _ln(arg) * ONE_18;\\r\\n        }\\r\\n\\r\\n        // When dividing, we multiply by ONE_18 to arrive at a result with 18 decimal places\\r\\n        return (logArg * ONE_18) / logBase;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\\r\\n     */\\r\\n    function ln(int256 a) internal pure returns (int256) {\\r\\n        // The real natural logarithm is not defined for negative numbers or zero.\\r\\n        require(a > 0, \\\"Errors.OUT_OF_BOUNDS\\\");\\r\\n        if (LN_36_LOWER_BOUND < a && a < LN_36_UPPER_BOUND) {\\r\\n            return _ln_36(a) / ONE_18;\\r\\n        } else {\\r\\n            return _ln(a);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\\r\\n     */\\r\\n    function _ln(int256 a) private pure returns (int256) {\\r\\n        if (a < ONE_18) {\\r\\n            // Since ln(a^k) = k * ln(a), we can compute ln(a) as ln(a) = ln((1/a)^(-1)) = - ln((1/a)). If a is less\\r\\n            // than one, 1/a will be greater than one, and this if statement will not be entered in the recursive call.\\r\\n            // Fixed point division requires multiplying by ONE_18.\\r\\n            return (-_ln((ONE_18 * ONE_18) / a));\\r\\n        }\\r\\n\\r\\n        // First, we use the fact that ln^(a * b) = ln(a) + ln(b) to decompose ln(a) into a sum of powers of two, which\\r\\n        // we call x_n, where x_n == 2^(7 - n), which are the natural logarithm of precomputed quantities a_n (that is,\\r\\n        // ln(a_n) = x_n). We choose the first x_n, x0, to equal 2^7 because the exponential of all larger powers cannot\\r\\n        // be represented as 18 fixed point decimal numbers in 256 bits, and are therefore larger than a.\\r\\n        // At the end of this process we will have the sum of all x_n = ln(a_n) that apply, and the remainder of this\\r\\n        // decomposition, which will be lower than the smallest a_n.\\r\\n        // ln(a) = k_0 * x_0 + k_1 * x_1 + ... + k_n * x_n + ln(remainder), where each k_n equals either 0 or 1.\\r\\n        // We mutate a by subtracting a_n, making it the remainder of the decomposition.\\r\\n\\r\\n        // For reasons related to how `exp` works, the first two a_n (e^(2^7) and e^(2^6)) are not stored as fixed point\\r\\n        // numbers with 18 decimals, but instead as plain integers with 0 decimals, so we need to multiply them by\\r\\n        // ONE_18 to convert them to fixed point.\\r\\n        // For each a_n, we test if that term is present in the decomposition (if a is larger than it), and if so divide\\r\\n        // by it and compute the accumulated sum.\\r\\n\\r\\n        int256 sum = 0;\\r\\n        if (a >= a0 * ONE_18) {\\r\\n            a /= a0; // Integer, not fixed point division\\r\\n            sum += x0;\\r\\n        }\\r\\n\\r\\n        if (a >= a1 * ONE_18) {\\r\\n            a /= a1; // Integer, not fixed point division\\r\\n            sum += x1;\\r\\n        }\\r\\n\\r\\n        // All other a_n and x_n are stored as 20 digit fixed point numbers, so we convert the sum and a to this format.\\r\\n        sum *= 100;\\r\\n        a *= 100;\\r\\n\\r\\n        // Because further a_n are  20 digit fixed point numbers, we multiply by ONE_20 when dividing by them.\\r\\n\\r\\n        if (a >= a2) {\\r\\n            a = (a * ONE_20) / a2;\\r\\n            sum += x2;\\r\\n        }\\r\\n\\r\\n        if (a >= a3) {\\r\\n            a = (a * ONE_20) / a3;\\r\\n            sum += x3;\\r\\n        }\\r\\n\\r\\n        if (a >= a4) {\\r\\n            a = (a * ONE_20) / a4;\\r\\n            sum += x4;\\r\\n        }\\r\\n\\r\\n        if (a >= a5) {\\r\\n            a = (a * ONE_20) / a5;\\r\\n            sum += x5;\\r\\n        }\\r\\n\\r\\n        if (a >= a6) {\\r\\n            a = (a * ONE_20) / a6;\\r\\n            sum += x6;\\r\\n        }\\r\\n\\r\\n        if (a >= a7) {\\r\\n            a = (a * ONE_20) / a7;\\r\\n            sum += x7;\\r\\n        }\\r\\n\\r\\n        if (a >= a8) {\\r\\n            a = (a * ONE_20) / a8;\\r\\n            sum += x8;\\r\\n        }\\r\\n\\r\\n        if (a >= a9) {\\r\\n            a = (a * ONE_20) / a9;\\r\\n            sum += x9;\\r\\n        }\\r\\n\\r\\n        if (a >= a10) {\\r\\n            a = (a * ONE_20) / a10;\\r\\n            sum += x10;\\r\\n        }\\r\\n\\r\\n        if (a >= a11) {\\r\\n            a = (a * ONE_20) / a11;\\r\\n            sum += x11;\\r\\n        }\\r\\n\\r\\n        // a is now a small number (smaller than a_11, which roughly equals 1.06). This means we can use a Taylor series\\r\\n        // that converges rapidly for values of `a` close to one - the same one used in ln_36.\\r\\n        // Let z = (a - 1) / (a + 1).\\r\\n        // ln(a) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\\r\\n\\r\\n        // Recall that 20 digit fixed point division requires multiplying by ONE_20, and multiplication requires\\r\\n        // division by ONE_20.\\r\\n        int256 z = ((a - ONE_20) * ONE_20) / (a + ONE_20);\\r\\n        int256 z_squared = (z * z) / ONE_20;\\r\\n\\r\\n        // num is the numerator of the series: the z^(2 * n + 1) term\\r\\n        int256 num = z;\\r\\n\\r\\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\\r\\n        int256 seriesSum = num;\\r\\n\\r\\n        // In each step, the numerator is multiplied by z^2\\r\\n        num = (num * z_squared) / ONE_20;\\r\\n        seriesSum += num / 3;\\r\\n\\r\\n        num = (num * z_squared) / ONE_20;\\r\\n        seriesSum += num / 5;\\r\\n\\r\\n        num = (num * z_squared) / ONE_20;\\r\\n        seriesSum += num / 7;\\r\\n\\r\\n        num = (num * z_squared) / ONE_20;\\r\\n        seriesSum += num / 9;\\r\\n\\r\\n        num = (num * z_squared) / ONE_20;\\r\\n        seriesSum += num / 11;\\r\\n\\r\\n        // 6 Taylor terms are sufficient for 36 decimal precision.\\r\\n\\r\\n        // Finally, we multiply by 2 (non fixed point) to compute ln(remainder)\\r\\n        seriesSum *= 2;\\r\\n\\r\\n        // We now have the sum of all x_n present, and the Taylor approximation of the logarithm of the remainder (both\\r\\n        // with 20 decimals). All that remains is to sum these two, and then drop two digits to return a 18 decimal\\r\\n        // value.\\r\\n\\r\\n        return (sum + seriesSum) / 100;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Intrnal high precision (36 decimal places) natural logarithm (ln(x)) with signed 18 decimal fixed point argument,\\r\\n     * for x close to one.\\r\\n     *\\r\\n     * Should only be used if x is between LN_36_LOWER_BOUND and LN_36_UPPER_BOUND.\\r\\n     */\\r\\n    function _ln_36(int256 x) private pure returns (int256) {\\r\\n        // Since ln(1) = 0, a value of x close to one will yield a very small result, which makes using 36 digits\\r\\n        // worthwhile.\\r\\n\\r\\n        // First, we transform x to a 36 digit fixed point value.\\r\\n        x *= ONE_18;\\r\\n\\r\\n        // We will use the following Taylor expansion, which converges very rapidly. Let z = (x - 1) / (x + 1).\\r\\n        // ln(x) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\\r\\n\\r\\n        // Recall that 36 digit fixed point division requires multiplying by ONE_36, and multiplication requires\\r\\n        // division by ONE_36.\\r\\n        int256 z = ((x - ONE_36) * ONE_36) / (x + ONE_36);\\r\\n        int256 z_squared = (z * z) / ONE_36;\\r\\n\\r\\n        // num is the numerator of the series: the z^(2 * n + 1) term\\r\\n        int256 num = z;\\r\\n\\r\\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\\r\\n        int256 seriesSum = num;\\r\\n\\r\\n        // In each step, the numerator is multiplied by z^2\\r\\n        num = (num * z_squared) / ONE_36;\\r\\n        seriesSum += num / 3;\\r\\n\\r\\n        num = (num * z_squared) / ONE_36;\\r\\n        seriesSum += num / 5;\\r\\n\\r\\n        num = (num * z_squared) / ONE_36;\\r\\n        seriesSum += num / 7;\\r\\n\\r\\n        num = (num * z_squared) / ONE_36;\\r\\n        seriesSum += num / 9;\\r\\n\\r\\n        num = (num * z_squared) / ONE_36;\\r\\n        seriesSum += num / 11;\\r\\n\\r\\n        num = (num * z_squared) / ONE_36;\\r\\n        seriesSum += num / 13;\\r\\n\\r\\n        num = (num * z_squared) / ONE_36;\\r\\n        seriesSum += num / 15;\\r\\n\\r\\n        // 8 Taylor terms are sufficient for 36 decimal precision.\\r\\n\\r\\n        // All that remains is multiplying by 2 (non fixed point).\\r\\n        return seriesSum * 2;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x88a20c491a8d9469afe6c4e584b5531bdcbf2964371de28c0895bc3055c5ad62\",\"license\":\"MIT\"},\"contracts/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow checks.\\r\\n * Adapted from OpenZeppelin's SafeMath library.\\r\\n */\\r\\nlibrary Math {\\r\\n    /**\\r\\n     * @dev Returns the absolute value of a signed integer.\\r\\n     */\\r\\n    function abs(int256 a) internal pure returns (uint256) {\\r\\n        return a > 0 ? uint256(a) : uint256(-a);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers of 256 bits, reverting on overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"Errors.ADD_OVERFLOW\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two signed integers, reverting on overflow.\\r\\n     */\\r\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a + b;\\r\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"Errors.ADD_OVERFLOW\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers of 256 bits, reverting on overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b <= a, \\\"Errors.SUB_OVERFLOW\\\");\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two signed integers, reverting on overflow.\\r\\n     */\\r\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a - b;\\r\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"Errors.SUB_OVERFLOW\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers of 256 bits.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a >= b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers of 256 bits.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a * b;\\r\\n        require(a == 0 || c / a == b, \\\"Errors.MUL_OVERFLOW\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        bool roundUp\\r\\n    ) internal pure returns (uint256) {\\r\\n        return roundUp ? divUp(a, b) : divDown(a, b);\\r\\n    }\\r\\n\\r\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0,\\\" Errors.ZERO_DIVISION\\\");\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"Errors.ZERO_DIVISION\\\");\\r\\n\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return 1 + (a - 1) / b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x35f20824a42d152adfcffc22b3c8a2484eaa5127b1d6ae3e6a56c8936a12e5a3\",\"license\":\"MIT\"},\"contracts/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xeeffca030e47ae166c981ca8726784781ea5fc5835aa27d7006783194a7ed18c\",\"license\":\"MIT\"},\"contracts/interfaces/IArbitrageQSUsdc.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IArbitrageQSUsdc {\\n\\n    struct Params {\\n        address qsPool;\\n        address usdc;\\n        address usdPlus;\\n        uint256 lowerChangePriceBound;\\n        uint256 upperChangePriceBound;\\n        address qsRouter;\\n    }\\n\\n    struct Tokens {\\n        address token0;\\n        address token1;\\n    }\\n\\n    struct Reserves {\\n        uint256 reserve0;\\n        uint256 reserve1;\\n        uint256 reserve2;\\n        uint256 reserve3;\\n    }\\n\\n    struct FixParams {\\n        bool skip;\\n        bool putUsdPlusToPool;\\n        Tokens tokens;\\n        Reserves reserves;\\n        address usdc;\\n        address usdPlus;\\n        address qsRouter;\\n        uint256 usdcIn;\\n        uint256 usdcOut;\\n    }\\n\\n\\n    struct Balances {\\n        uint256 reserve0;\\n        uint256 reserve1;\\n        uint256 reserve0Normalized;\\n        uint256 reserve1Normalized;\\n    }\\n\\n    function getFixParams(Params memory params) external view returns (FixParams memory);\\n\\n    function balancesQsPool(address pool) external view returns (Balances memory);\\n\\n    function getSampleTargets(address pool) external view returns (Balances memory);\\n\\n    function fix(Params memory params) external;\\n\\n    function fixByFlash(Params memory params) external;\\n}\\n\",\"keccak256\":\"0xe8207dc34f8089588853b588cb9e57ac909eed6f0af3322e85e8bd593ac1ff26\",\"license\":\"Unlicense\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity >=0.5.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xa791b279660ee5eb66ebd4f23b539055d178ae24677f3a164567441ecfdcf73a\"},\"contracts/interfaces/IExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0 <0.9.0;\\r\\n\\r\\n\\r\\ninterface IExchange {\\r\\n\\r\\n    /**\\r\\n     * @param _addrTok Token to withdraw\\r\\n     * @param _amount Amount of USD+ tokens to burn\\r\\n     * @return Amount of minted to caller tokens\\r\\n     */\\r\\n    function buy(address _addrTok, uint256 _amount) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @param _addrTok Token to withdraw\\r\\n     * @param _amount Amount of USD+ tokens to burn\\r\\n     * @return Amount of unstacked and transferred to caller tokens\\r\\n     */\\r\\n    function redeem(address _addrTok, uint256 _amount) external returns (uint256);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x8e905caaf5e9412184875b595b5af2a17c177d45f500ee89bb454d7641b572ef\",\"license\":\"MIT\"},\"contracts/interfaces/IFlashLoanRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// Inspired by Aave Protocol's IFlashLoanReceiver.\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IFlashLoanRecipient {\\r\\n    /**\\r\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\r\\n     *\\r\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\r\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\r\\n     * Vault, or else the entire flash loan will revert.\\r\\n     *\\r\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\r\\n     */\\r\\n    function receiveFlashLoan(\\r\\n        IERC20[] memory tokens,\\r\\n        uint256[] memory amounts,\\r\\n        uint256[] memory feeAmounts,\\r\\n        bytes memory userData\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x1d30c3d750d452f174f369dea6e67597bf5f2bd7bc375bf15903c6558978373b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x6e301cd1c669825e95796a549af46ea9214abad484a2d687c9a8f4d3953457af\"},\"contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: GNU-3\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * IUniswapV2Router02.sol is copy of https://github.com/Uniswap/v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol\\r\\n */\\r\\ninterface IUniswapV2Router02 {\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x29b812e70e3db6eb78664c141580061812167f9da57d49d2412ad18a25e88028\",\"license\":\"GNU-3\"},\"contracts/interfaces/IUsdPlusToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0 <0.9.0;\\r\\n\\r\\n\\r\\ninterface IUsdPlusToken {\\r\\n\\r\\n    /**\\r\\n     * @dev Exchanger\\r\\n     */\\r\\n    function exchange() external returns (address);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x3ddb236b2418bd47a53b92d3c287dfc56d538b14a0194831062c48078423154e\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// Inspired by Aave Protocol's IFlashLoanReceiver.\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IFlashLoanRecipient.sol\\\";\\r\\n\\r\\ninterface IVault {\\r\\n    /**\\r\\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\\r\\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\\r\\n     *\\r\\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\\r\\n     * for each token contract. `tokens` must be sorted in ascending order.\\r\\n     *\\r\\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\\r\\n     * `receiveFlashLoan` call.\\r\\n     *\\r\\n     * Emits `FlashLoan` events.\\r\\n     */\\r\\n    function flashLoan(\\r\\n        IFlashLoanRecipient recipient,\\r\\n        IERC20[] memory tokens,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory userData\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\\r\\n     */\\r\\n    event FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x98c228988b85a107128afdb8ed3e602626e988b07b5ac5576f5092047b11384b\",\"license\":\"GPL-3.0-or-later\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612cd0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80639a570a261161005b5780639a570a26146101125780639ddc352e14610125578063c432eb9814610145578063f04f27071461015857600080fd5b8063158274a51461008d5780632edde981146100c55780636ac56956146100e557806394a2443e146100fa575b600080fd5b6100a873ba12222222228d8ba445958a75a0704d566bf2c881565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d86100d336600461231f565b61016b565b6040516100bc91906128fe565b6100f86100f33660046125f9565b61047b565b005b610104620f424081565b6040519081526020016100bc565b6100f86101203660046125f9565b61059b565b6101386101333660046125f9565b61092f565b6040516100bc9190612929565b6100d861015336600461231f565b611087565b6100f8610166366004612359565b6112dc565b6101966040518060800160405280600081526020016000815260200160008152602001600081525090565b600080836001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156101d257600080fd5b505afa1580156101e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020a9190612694565b50915091506000846001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561024a57600080fd5b505afa15801561025e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610282919061233c565b90506000856001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156102bf57600080fd5b505afa1580156102d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f7919061233c565b90506000826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561033457600080fd5b505afa158015610348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036c91906126fd565b60ff1690506000826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156103ac57600080fd5b505afa1580156103c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e491906126fd565b60ff16905060006103f6836012612b9c565b61040190600a612ad5565b610414906001600160701b038916612b7d565b90506000610423836012612b9c565b61042e90600a612ad5565b610441906001600160701b038916612b7d565b604080516080810182526001600160701b039a8b168152989099166020890152978701919091525050505060608201929092529392505050565b60006104868261092f565b9050610491816115dd565b60208201516040516370a0823160e01b81523060048201526001600160a01b039091169063a9059cbb90339083906370a082319060240160206040518083038186803b1580156104e057600080fd5b505afa1580156104f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051891906126e4565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561055e57600080fd5b505af1158015610572573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105969190612503565b505050565b60006105a68261092f565b60e0810151610100820151919250908181101561060a5760405162461bcd60e51b815260206004820152601d60248201527f557364634f75742073686f756c64206265206d6f72652055736463496e00000060448201526064015b60405180910390fd5b60208401516040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561065057600080fd5b505afa158015610664573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068891906126e4565b90506106be60405180604001604052806012815260200171030b6b7bab73a2ab9b231a132b337b9329d160751b81525082611648565b60008482336040516020016106d593929190612938565b60408051601f1981840301815260018084528383019092529250600091906020808301908036833701905050905085608001518160008151811061071b5761071b612bc9565b6001600160a01b0392909216602092830291909101909101526040805160018082528183019092526000918160200160208202803683370190505090508660e001518160008151811061077057610770612bc9565b6020908102919091010152604051632e1c224f60e11b815273ba12222222228d8ba445958a75a0704d566bf2c890635c38449e906107b8903090869086908990600401612835565b600060405180830381600087803b1580156107d257600080fd5b505af11580156107e6573d6000803e3d6000fd5b5050505060208801516040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561083057600080fd5b505afa158015610844573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086891906126e4565b905061089d60405180604001604052806011815260200170030b6b7bab73a2ab9b231a0b33a32b91d1607d1b81525082611648565b602089015160405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b1580156108eb57600080fd5b505af11580156108ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109239190612503565b50505050505050505050565b6109376120b4565b600082604001516001600160a01b031683600001516001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561098457600080fd5b505afa158015610998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bc919061233c565b6001600160a01b031614905060006109d7846000015161016b565b905060006109e88560000151611087565b9050610a10604051806060016040528060248152602001612c53602491398260400151611648565b610a36604051806060016040528060248152602001612c2f602491398260600151611648565b610a5c604051806060016040528060248152602001612c77602491398360400151611648565b610a82604051806060016040528060248152602001612c0b602491398360600151611648565b6040810151670de0b6b3a764000090610a9b9082612b7d565b9050816060015181610aad9190612a70565b9050826060015181610abf9190612b7d565b9050826040015181610ad19190612a70565b9050610b026040518060400160405280600d81526020016c031b430b733b2a83934b1b29d1609d1b81525082611648565b808660600151108015610b185750856080015181105b15610b9e575050604080516101208101825260018152600060208083018290528351808501855282815280820183905283850152835160808082018652838252918101839052938401829052606084810183905283019390935291810182905260a0810182905260c0810182905260e08101829052610100810191909152949350505050565b610be16040518060400160405280601a81526020017f62616c616e6365735461726765742e72657365727665303a20200000000000008152508360000151611648565b610c246040518060400160405280601a81526020017f62616c616e6365735461726765742e72657365727665313a20200000000000008152508360200151611648565b610c676040518060400160405280601a81526020017f62616c616e63657343757272656e742e72657365727665303a200000000000008152508460000151611648565b610caa6040518060400160405280601a81526020017f62616c616e63657343757272656e742e72657365727665313a200000000000008152508460200151611648565b8251602080850151845191850151909190610cc36120b4565b8815610e6157670de0b6b3a7640000861015610d9d5760405180610120016040528060001515815260200160001515815260200160405180604001604052808e602001516001600160a01b031681526020018e604001516001600160a01b0316815250815260200160405180608001604052808781526020018881526020018581526020018681525081526020018c602001516001600160a01b031681526020018c604001516001600160a01b031681526020018c60a001516001600160a01b031681526020016000815260200160008152509050610ff5565b60405180610120016040528060001515815260200160011515815260200160405180604001604052808e604001516001600160a01b031681526020018e602001516001600160a01b0316815250815260200160405180608001604052808881526020018781526020018681526020018581525081526020018c602001516001600160a01b031681526020018c604001516001600160a01b031681526020018c60a001516001600160a01b031681526020016000815260200160008152509050610ff5565b670de0b6b3a7640000861015610f355760405180610120016040528060001515815260200160011515815260200160405180604001604052808e604001516001600160a01b031681526020018e602001516001600160a01b0316815250815260200160405180608001604052808781526020018881526020018581526020018681525081526020018c602001516001600160a01b031681526020018c604001516001600160a01b031681526020018c60a001516001600160a01b031681526020016000815260200160008152509050610ff5565b60405180610120016040528060001515815260200160001515815260200160405180604001604052808e602001516001600160a01b031681526020018e604001516001600160a01b0316815250815260200160405180608001604052808881526020018781526020018681526020018581525081526020018c602001516001600160a01b031681526020018c604001516001600160a01b031681526020018c60a001516001600160a01b0316815260200160008152602001600081525090505b80602001511561103e5760408082015180516020918201516060808601518051948101519581015191015161102e958795929091611691565b61010083015260e0820152611079565b60408082015180516020918201516060808601518051948101519581015191015161106d9587959290916116f8565b61010083015260e08201525b9a9950505050505050505050565b6110b26040518060800160405280600081526020016000815260200160008152602001600081525090565b6000826001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156110ed57600080fd5b505afa158015611101573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611125919061233c565b90506000836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561116257600080fd5b505afa158015611176573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119a919061233c565b90506000826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156111d757600080fd5b505afa1580156111eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120f91906126fd565b60ff1690506000826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561124f57600080fd5b505afa158015611263573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128791906126fd565b60ff169050600061129983600a612ad5565b905060006112a883600a612ad5565b604080516080810182529384526020840191909152670de0b6b3a76400009083018190526060830152509695505050505050565b83516001146113375760405162461bcd60e51b815260206004820152602160248201527f4f6e6c79206f6e6520746f6b656e2073686f756c6420626520696e20666c61736044820152600d60fb1b6064820152608401610601565b600080600083806020019051810190611350919061251e565b92509250925082608001516001600160a01b03168760008151811061137757611377612bc9565b60200260200101516001600160a01b0316146113e05760405162461bcd60e51b815260206004820152602260248201527f4f6e6c79205553444320746f6b656e2073686f756c6420626520696e20666c616044820152610e6d60f31b6064820152608401610601565b846000815181106113f3576113f3612bc9565b602002602001015160001461144a5760405162461bcd60e51b815260206004820152601860248201527f4f6e6c79207a65726f206665652061636365707461626c6500000000000000006044820152606401610601565b60808301516040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561149057600080fd5b505afa1580156114a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c891906126e4565b9050828460e001516114da9190612a58565b8110156115295760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420656e6f75676820757364632073656e6420746f20666c6173680000006044820152606401610601565b611532846115dd565b608084015160e085015160405163a9059cbb60e01b815273ba12222222228d8ba445958a75a0704d566bf2c8600482015260248101919091526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b15801561159a57600080fd5b505af11580156115ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d29190612503565b505050505050505050565b80602001511561161957604080820151805160209182015160608086015180519481015195810151910151611616958795929091611748565b50565b604080820151805160209182015160608086015180519481015195810151910151611616958795929091611802565b61168d828260405160240161165e9291906128dc565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b1790526118a6565b5050565b60008060006116a2878787876118c7565b90506116cb60405180604001604052806005815260200164030a4b71d160dd1b81525082611648565b60006116d682611987565b905060006116e5828a8a6119a1565b919c919b50909950505050505050505050565b6000806000611709878787876118c7565b905061173260405180604001604052806005815260200164030a4b71d160dd1b81525082611648565b8060006116e5611743838b8b6119a1565b611987565b6000611756858585856118c7565b905061177f60405180604001604052806005815260200164030a4b71d160dd1b81525082611648565b600061178a82611987565b905060006117998288886119a1565b90506103e88084116117e95760405162461bcd60e51b815260206004820152601960248201527861496e20746f6f206c6f772c20736b697020616374696f6e7360381b6044820152606401610601565b6117f58b8b8b866119e2565b5050505050505050505050565b6000611810858585856118c7565b905061183960405180604001604052806005815260200164030a4b71d160dd1b81525082611648565b80600061184a6117438389896119a1565b90506103e880841161189a5760405162461bcd60e51b815260206004820152601960248201527861496e20746f6f206c6f772c20736b697020616374696f6e7360381b6044820152606401610601565b6117f58b8b8b86611a07565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6000806118ed836118e7866118e189818c623cda20611a23565b90611a23565b90611aa9565b90506000611900876118e1816009611a23565b905060006119108861175e611a23565b905060006119358261192f620f2ad96119298888611b04565b90611b04565b90611b63565b9050600061194282611bbf565b905060006119528b6107cd611a23565b905060006119668261192f6103e586611b04565b90506000611976826107ca611aa9565b9d9c50505050505050505050505050565b600061199b61270c6118e784612710611a23565b92915050565b60006103e56103e8826119b48784611a23565b905060006119c28287611a23565b905060006119d4836119298a87611a23565b905060006110798383611aa9565b60006119ee8583611c18565b905060006119fe86868685611db1565b50505050505050565b6000611a1585858585611db1565b905060006119fe8683611f72565b600082611a325750600061199b565b6000611a3e8385612b7d565b905082611a4b8583612a70565b14611aa25760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610601565b9392505050565b6000808211611afa5760405162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f0000000000006044820152606401610601565b611aa28284612a70565b600080611b118385612a58565b905083811015611aa25760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610601565b600082821115611bb55760405162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f7700006044820152606401610601565b611aa28284612b9c565b6000806002611bcf846001612a58565b611bd99190612a70565b90508291505b81811015611c1257905080600281611bf78186612a70565b611c019190612a58565b611c0b9190612a70565b9050611bdf565b50919050565b6000808360a001516001600160a01b031663d2f7265a6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611c5a57600080fd5b505af1158015611c6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c92919061233c565b608085015160405163095ea7b360e01b81526001600160a01b0380841660048301526024820187905292935091169063095ea7b390604401602060405180830381600087803b158015611ce457600080fd5b505af1158015611cf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1c9190612503565b50608084015160405163cce7ec1360e01b81526001600160a01b0391821660048201526024810185905260009183169063cce7ec13906044015b602060405180830381600087803b158015611d7057600080fd5b505af1158015611d84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da891906126e4565b95945050505050565b60c084015160405163095ea7b360e01b81526001600160a01b0391821660048201526024810183905260009185169063095ea7b390604401602060405180830381600087803b158015611e0357600080fd5b505af1158015611e17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3b9190612503565b506040805160028082526060820183526000926020830190803683370190505090508481600081518110611e7157611e71612bc9565b60200260200101906001600160a01b031690816001600160a01b0316815250508381600181518110611ea557611ea5612bc9565b6001600160a01b03928316602091820292909201015260c08701516040516338ed173960e01b815260009291909116906338ed173990611ef390879085908790309060001990600401612968565b600060405180830381600087803b158015611f0d57600080fd5b505af1158015611f21573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f49919081019061246b565b905080600181518110611f5e57611f5e612bc9565b602002602001015192505050949350505050565b6000808360a001516001600160a01b031663d2f7265a6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611fb457600080fd5b505af1158015611fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fec919061233c565b60a085015160405163095ea7b360e01b81526001600160a01b0380841660048301526024820187905292935091169063095ea7b390604401602060405180830381600087803b15801561203e57600080fd5b505af1158015612052573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120769190612503565b5060808401516040516301e9a69560e41b81526001600160a01b03918216600482015260248101859052600091831690631e9a695090604401611d56565b6040805161012081018252600080825260208083018290528351808501855282815290810191909152909182019081526020016121126040518060800160405280600081526020016000815260200160008152602001600081525090565b815260006020820181905260408201819052606082018190526080820181905260a09091015290565b805161214681612bf5565b919050565b600082601f83011261215c57600080fd5b8135602061217161216c83612a34565b612a03565b80838252828201915082860187848660051b890101111561219157600080fd5b60005b858110156121b057813584529284019290840190600101612194565b5090979650505050505050565b8051801515811461214657600080fd5b600082601f8301126121de57600080fd5b813567ffffffffffffffff8111156121f8576121f8612bdf565b61220b601f8201601f1916602001612a03565b81815284602083860101111561222057600080fd5b816020850160208301376000918101602001919091529392505050565b60006080828403121561224f57600080fd5b6040516080810181811067ffffffffffffffff8211171561227257612272612bdf565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b6000604082840312156122b557600080fd5b6040516040810181811067ffffffffffffffff821117156122d8576122d8612bdf565b806040525080915082516122eb81612bf5565b815260208301516122fb81612bf5565b6020919091015292915050565b80516001600160701b038116811461214657600080fd5b60006020828403121561233157600080fd5b8135611aa281612bf5565b60006020828403121561234e57600080fd5b8151611aa281612bf5565b6000806000806080858703121561236f57600080fd5b843567ffffffffffffffff8082111561238757600080fd5b818701915087601f83011261239b57600080fd5b813560206123ab61216c83612a34565b8083825282820191508286018c848660051b89010111156123cb57600080fd5b600096505b848710156123f75780356123e381612bf5565b8352600196909601959183019183016123d0565b509850508801359250508082111561240e57600080fd5b61241a8883890161214b565b9450604087013591508082111561243057600080fd5b61243c8883890161214b565b9350606087013591508082111561245257600080fd5b5061245f878288016121cd565b91505092959194509250565b6000602080838503121561247e57600080fd5b825167ffffffffffffffff81111561249557600080fd5b8301601f810185136124a657600080fd5b80516124b461216c82612a34565b80828252848201915084840188868560051b87010111156124d457600080fd5b600094505b838510156124f75780518352600194909401939185019185016124d9565b50979650505050505050565b60006020828403121561251557600080fd5b611aa2826121bd565b60008060008385036101e081121561253557600080fd5b6101a08082121561254557600080fd5b61254d6129d9565b9150612558866121bd565b8252612566602087016121bd565b602083015261257887604088016122a3565b604083015261258a876080880161223d565b606083015261010061259d81880161213b565b60808401526125af610120880161213b565b60a08401526125c1610140880161213b565b60c084015261016087015160e08401526101808701519083015285015190935091506125f06101c0850161213b565b90509250925092565b600060c0828403121561260b57600080fd5b60405160c0810181811067ffffffffffffffff8211171561262e5761262e612bdf565b604052823561263c81612bf5565b8152602083013561264c81612bf5565b6020820152604083013561265f81612bf5565b80604083015250606083013560608201526080830135608082015260a083013561268881612bf5565b60a08201529392505050565b6000806000606084860312156126a957600080fd5b6126b284612308565b92506126c060208501612308565b9150604084015163ffffffff811681146126d957600080fd5b809150509250925092565b6000602082840312156126f657600080fd5b5051919050565b60006020828403121561270f57600080fd5b815160ff81168114611aa257600080fd5b6000815180845260005b818110156127465760208185018101518683018201520161272a565b81811115612758576000602083870101525b50601f01601f19169290920160200192915050565b8051151582526020810151612786602084018215159052565b5060408101516127af604084018280516001600160a01b03908116835260209182015116910152565b5060608181015180516080850152602081015160a0850152604081015160c08501529081015160e08401525060808101516101006127f7818501836001600160a01b03169052565b60a08301516001600160a01b0390811661012086015260c08401511661014085015260e0830151610160850152909101516101809092019190915250565b6001600160a01b0385811682526080602080840182905286519184018290526000928782019290919060a0860190855b81811015612883578551851683529483019491830191600101612865565b5050858103604087015287518082529082019350915080870160005b838110156128bb5781518552938201939082019060010161289f565b5050505082810360608401526128d18185612720565b979650505050505050565b6040815260006128ef6040830185612720565b90508260208301529392505050565b815181526020808301519082015260408083015190820152606080830151908201526080810161199b565b6101a0810161199b828461276d565b6101e08101612947828661276d565b6101a08201939093526001600160a01b03919091166101c090910152919050565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156129b85784516001600160a01b031683529383019391830191600101612993565b50506001600160a01b03969096166060850152505050608001529392505050565b604051610120810167ffffffffffffffff811182821017156129fd576129fd612bdf565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612a2c57612a2c612bdf565b604052919050565b600067ffffffffffffffff821115612a4e57612a4e612bdf565b5060051b60200190565b60008219821115612a6b57612a6b612bb3565b500190565b600082612a8d57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115612acd578160001904821115612ab357612ab3612bb3565b80851615612ac057918102915b93841c9390800290612a97565b509250929050565b6000611aa28383600082612aeb5750600161199b565b81612af85750600061199b565b8160018114612b0e5760028114612b1857612b34565b600191505061199b565b60ff841115612b2957612b29612bb3565b50506001821b61199b565b5060208310610133831016604e8410600b8410161715612b57575081810a61199b565b612b618383612a92565b8060001904821115612b7557612b75612bb3565b029392505050565b6000816000190483118215151615612b9757612b97612bb3565b500290565b600082821015612bae57612bae612bb3565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461161657600080fdfe62616c616e63657343757272656e742e72657365727665314e6f726d616c697a65643a2062616c616e6365735461726765742e72657365727665314e6f726d616c697a65643a202062616c616e6365735461726765742e72657365727665304e6f726d616c697a65643a202062616c616e63657343757272656e742e72657365727665304e6f726d616c697a65643a20a26469706673582212202461e4d1c1bf339d4270ea5be59eac03004b5664010d9fb0005a7b6af22909ee64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80639a570a261161005b5780639a570a26146101125780639ddc352e14610125578063c432eb9814610145578063f04f27071461015857600080fd5b8063158274a51461008d5780632edde981146100c55780636ac56956146100e557806394a2443e146100fa575b600080fd5b6100a873ba12222222228d8ba445958a75a0704d566bf2c881565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d86100d336600461231f565b61016b565b6040516100bc91906128fe565b6100f86100f33660046125f9565b61047b565b005b610104620f424081565b6040519081526020016100bc565b6100f86101203660046125f9565b61059b565b6101386101333660046125f9565b61092f565b6040516100bc9190612929565b6100d861015336600461231f565b611087565b6100f8610166366004612359565b6112dc565b6101966040518060800160405280600081526020016000815260200160008152602001600081525090565b600080836001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156101d257600080fd5b505afa1580156101e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020a9190612694565b50915091506000846001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561024a57600080fd5b505afa15801561025e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610282919061233c565b90506000856001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156102bf57600080fd5b505afa1580156102d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f7919061233c565b90506000826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561033457600080fd5b505afa158015610348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036c91906126fd565b60ff1690506000826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156103ac57600080fd5b505afa1580156103c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e491906126fd565b60ff16905060006103f6836012612b9c565b61040190600a612ad5565b610414906001600160701b038916612b7d565b90506000610423836012612b9c565b61042e90600a612ad5565b610441906001600160701b038916612b7d565b604080516080810182526001600160701b039a8b168152989099166020890152978701919091525050505060608201929092529392505050565b60006104868261092f565b9050610491816115dd565b60208201516040516370a0823160e01b81523060048201526001600160a01b039091169063a9059cbb90339083906370a082319060240160206040518083038186803b1580156104e057600080fd5b505afa1580156104f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051891906126e4565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561055e57600080fd5b505af1158015610572573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105969190612503565b505050565b60006105a68261092f565b60e0810151610100820151919250908181101561060a5760405162461bcd60e51b815260206004820152601d60248201527f557364634f75742073686f756c64206265206d6f72652055736463496e00000060448201526064015b60405180910390fd5b60208401516040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561065057600080fd5b505afa158015610664573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068891906126e4565b90506106be60405180604001604052806012815260200171030b6b7bab73a2ab9b231a132b337b9329d160751b81525082611648565b60008482336040516020016106d593929190612938565b60408051601f1981840301815260018084528383019092529250600091906020808301908036833701905050905085608001518160008151811061071b5761071b612bc9565b6001600160a01b0392909216602092830291909101909101526040805160018082528183019092526000918160200160208202803683370190505090508660e001518160008151811061077057610770612bc9565b6020908102919091010152604051632e1c224f60e11b815273ba12222222228d8ba445958a75a0704d566bf2c890635c38449e906107b8903090869086908990600401612835565b600060405180830381600087803b1580156107d257600080fd5b505af11580156107e6573d6000803e3d6000fd5b5050505060208801516040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561083057600080fd5b505afa158015610844573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086891906126e4565b905061089d60405180604001604052806011815260200170030b6b7bab73a2ab9b231a0b33a32b91d1607d1b81525082611648565b602089015160405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b1580156108eb57600080fd5b505af11580156108ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109239190612503565b50505050505050505050565b6109376120b4565b600082604001516001600160a01b031683600001516001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561098457600080fd5b505afa158015610998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bc919061233c565b6001600160a01b031614905060006109d7846000015161016b565b905060006109e88560000151611087565b9050610a10604051806060016040528060248152602001612c53602491398260400151611648565b610a36604051806060016040528060248152602001612c2f602491398260600151611648565b610a5c604051806060016040528060248152602001612c77602491398360400151611648565b610a82604051806060016040528060248152602001612c0b602491398360600151611648565b6040810151670de0b6b3a764000090610a9b9082612b7d565b9050816060015181610aad9190612a70565b9050826060015181610abf9190612b7d565b9050826040015181610ad19190612a70565b9050610b026040518060400160405280600d81526020016c031b430b733b2a83934b1b29d1609d1b81525082611648565b808660600151108015610b185750856080015181105b15610b9e575050604080516101208101825260018152600060208083018290528351808501855282815280820183905283850152835160808082018652838252918101839052938401829052606084810183905283019390935291810182905260a0810182905260c0810182905260e08101829052610100810191909152949350505050565b610be16040518060400160405280601a81526020017f62616c616e6365735461726765742e72657365727665303a20200000000000008152508360000151611648565b610c246040518060400160405280601a81526020017f62616c616e6365735461726765742e72657365727665313a20200000000000008152508360200151611648565b610c676040518060400160405280601a81526020017f62616c616e63657343757272656e742e72657365727665303a200000000000008152508460000151611648565b610caa6040518060400160405280601a81526020017f62616c616e63657343757272656e742e72657365727665313a200000000000008152508460200151611648565b8251602080850151845191850151909190610cc36120b4565b8815610e6157670de0b6b3a7640000861015610d9d5760405180610120016040528060001515815260200160001515815260200160405180604001604052808e602001516001600160a01b031681526020018e604001516001600160a01b0316815250815260200160405180608001604052808781526020018881526020018581526020018681525081526020018c602001516001600160a01b031681526020018c604001516001600160a01b031681526020018c60a001516001600160a01b031681526020016000815260200160008152509050610ff5565b60405180610120016040528060001515815260200160011515815260200160405180604001604052808e604001516001600160a01b031681526020018e602001516001600160a01b0316815250815260200160405180608001604052808881526020018781526020018681526020018581525081526020018c602001516001600160a01b031681526020018c604001516001600160a01b031681526020018c60a001516001600160a01b031681526020016000815260200160008152509050610ff5565b670de0b6b3a7640000861015610f355760405180610120016040528060001515815260200160011515815260200160405180604001604052808e604001516001600160a01b031681526020018e602001516001600160a01b0316815250815260200160405180608001604052808781526020018881526020018581526020018681525081526020018c602001516001600160a01b031681526020018c604001516001600160a01b031681526020018c60a001516001600160a01b031681526020016000815260200160008152509050610ff5565b60405180610120016040528060001515815260200160001515815260200160405180604001604052808e602001516001600160a01b031681526020018e604001516001600160a01b0316815250815260200160405180608001604052808881526020018781526020018681526020018581525081526020018c602001516001600160a01b031681526020018c604001516001600160a01b031681526020018c60a001516001600160a01b0316815260200160008152602001600081525090505b80602001511561103e5760408082015180516020918201516060808601518051948101519581015191015161102e958795929091611691565b61010083015260e0820152611079565b60408082015180516020918201516060808601518051948101519581015191015161106d9587959290916116f8565b61010083015260e08201525b9a9950505050505050505050565b6110b26040518060800160405280600081526020016000815260200160008152602001600081525090565b6000826001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156110ed57600080fd5b505afa158015611101573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611125919061233c565b90506000836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561116257600080fd5b505afa158015611176573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119a919061233c565b90506000826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156111d757600080fd5b505afa1580156111eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120f91906126fd565b60ff1690506000826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561124f57600080fd5b505afa158015611263573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128791906126fd565b60ff169050600061129983600a612ad5565b905060006112a883600a612ad5565b604080516080810182529384526020840191909152670de0b6b3a76400009083018190526060830152509695505050505050565b83516001146113375760405162461bcd60e51b815260206004820152602160248201527f4f6e6c79206f6e6520746f6b656e2073686f756c6420626520696e20666c61736044820152600d60fb1b6064820152608401610601565b600080600083806020019051810190611350919061251e565b92509250925082608001516001600160a01b03168760008151811061137757611377612bc9565b60200260200101516001600160a01b0316146113e05760405162461bcd60e51b815260206004820152602260248201527f4f6e6c79205553444320746f6b656e2073686f756c6420626520696e20666c616044820152610e6d60f31b6064820152608401610601565b846000815181106113f3576113f3612bc9565b602002602001015160001461144a5760405162461bcd60e51b815260206004820152601860248201527f4f6e6c79207a65726f206665652061636365707461626c6500000000000000006044820152606401610601565b60808301516040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561149057600080fd5b505afa1580156114a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c891906126e4565b9050828460e001516114da9190612a58565b8110156115295760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420656e6f75676820757364632073656e6420746f20666c6173680000006044820152606401610601565b611532846115dd565b608084015160e085015160405163a9059cbb60e01b815273ba12222222228d8ba445958a75a0704d566bf2c8600482015260248101919091526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b15801561159a57600080fd5b505af11580156115ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d29190612503565b505050505050505050565b80602001511561161957604080820151805160209182015160608086015180519481015195810151910151611616958795929091611748565b50565b604080820151805160209182015160608086015180519481015195810151910151611616958795929091611802565b61168d828260405160240161165e9291906128dc565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b1790526118a6565b5050565b60008060006116a2878787876118c7565b90506116cb60405180604001604052806005815260200164030a4b71d160dd1b81525082611648565b60006116d682611987565b905060006116e5828a8a6119a1565b919c919b50909950505050505050505050565b6000806000611709878787876118c7565b905061173260405180604001604052806005815260200164030a4b71d160dd1b81525082611648565b8060006116e5611743838b8b6119a1565b611987565b6000611756858585856118c7565b905061177f60405180604001604052806005815260200164030a4b71d160dd1b81525082611648565b600061178a82611987565b905060006117998288886119a1565b90506103e88084116117e95760405162461bcd60e51b815260206004820152601960248201527861496e20746f6f206c6f772c20736b697020616374696f6e7360381b6044820152606401610601565b6117f58b8b8b866119e2565b5050505050505050505050565b6000611810858585856118c7565b905061183960405180604001604052806005815260200164030a4b71d160dd1b81525082611648565b80600061184a6117438389896119a1565b90506103e880841161189a5760405162461bcd60e51b815260206004820152601960248201527861496e20746f6f206c6f772c20736b697020616374696f6e7360381b6044820152606401610601565b6117f58b8b8b86611a07565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6000806118ed836118e7866118e189818c623cda20611a23565b90611a23565b90611aa9565b90506000611900876118e1816009611a23565b905060006119108861175e611a23565b905060006119358261192f620f2ad96119298888611b04565b90611b04565b90611b63565b9050600061194282611bbf565b905060006119528b6107cd611a23565b905060006119668261192f6103e586611b04565b90506000611976826107ca611aa9565b9d9c50505050505050505050505050565b600061199b61270c6118e784612710611a23565b92915050565b60006103e56103e8826119b48784611a23565b905060006119c28287611a23565b905060006119d4836119298a87611a23565b905060006110798383611aa9565b60006119ee8583611c18565b905060006119fe86868685611db1565b50505050505050565b6000611a1585858585611db1565b905060006119fe8683611f72565b600082611a325750600061199b565b6000611a3e8385612b7d565b905082611a4b8583612a70565b14611aa25760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610601565b9392505050565b6000808211611afa5760405162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f0000000000006044820152606401610601565b611aa28284612a70565b600080611b118385612a58565b905083811015611aa25760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610601565b600082821115611bb55760405162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f7700006044820152606401610601565b611aa28284612b9c565b6000806002611bcf846001612a58565b611bd99190612a70565b90508291505b81811015611c1257905080600281611bf78186612a70565b611c019190612a58565b611c0b9190612a70565b9050611bdf565b50919050565b6000808360a001516001600160a01b031663d2f7265a6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611c5a57600080fd5b505af1158015611c6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c92919061233c565b608085015160405163095ea7b360e01b81526001600160a01b0380841660048301526024820187905292935091169063095ea7b390604401602060405180830381600087803b158015611ce457600080fd5b505af1158015611cf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1c9190612503565b50608084015160405163cce7ec1360e01b81526001600160a01b0391821660048201526024810185905260009183169063cce7ec13906044015b602060405180830381600087803b158015611d7057600080fd5b505af1158015611d84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da891906126e4565b95945050505050565b60c084015160405163095ea7b360e01b81526001600160a01b0391821660048201526024810183905260009185169063095ea7b390604401602060405180830381600087803b158015611e0357600080fd5b505af1158015611e17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3b9190612503565b506040805160028082526060820183526000926020830190803683370190505090508481600081518110611e7157611e71612bc9565b60200260200101906001600160a01b031690816001600160a01b0316815250508381600181518110611ea557611ea5612bc9565b6001600160a01b03928316602091820292909201015260c08701516040516338ed173960e01b815260009291909116906338ed173990611ef390879085908790309060001990600401612968565b600060405180830381600087803b158015611f0d57600080fd5b505af1158015611f21573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f49919081019061246b565b905080600181518110611f5e57611f5e612bc9565b602002602001015192505050949350505050565b6000808360a001516001600160a01b031663d2f7265a6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611fb457600080fd5b505af1158015611fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fec919061233c565b60a085015160405163095ea7b360e01b81526001600160a01b0380841660048301526024820187905292935091169063095ea7b390604401602060405180830381600087803b15801561203e57600080fd5b505af1158015612052573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120769190612503565b5060808401516040516301e9a69560e41b81526001600160a01b03918216600482015260248101859052600091831690631e9a695090604401611d56565b6040805161012081018252600080825260208083018290528351808501855282815290810191909152909182019081526020016121126040518060800160405280600081526020016000815260200160008152602001600081525090565b815260006020820181905260408201819052606082018190526080820181905260a09091015290565b805161214681612bf5565b919050565b600082601f83011261215c57600080fd5b8135602061217161216c83612a34565b612a03565b80838252828201915082860187848660051b890101111561219157600080fd5b60005b858110156121b057813584529284019290840190600101612194565b5090979650505050505050565b8051801515811461214657600080fd5b600082601f8301126121de57600080fd5b813567ffffffffffffffff8111156121f8576121f8612bdf565b61220b601f8201601f1916602001612a03565b81815284602083860101111561222057600080fd5b816020850160208301376000918101602001919091529392505050565b60006080828403121561224f57600080fd5b6040516080810181811067ffffffffffffffff8211171561227257612272612bdf565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b6000604082840312156122b557600080fd5b6040516040810181811067ffffffffffffffff821117156122d8576122d8612bdf565b806040525080915082516122eb81612bf5565b815260208301516122fb81612bf5565b6020919091015292915050565b80516001600160701b038116811461214657600080fd5b60006020828403121561233157600080fd5b8135611aa281612bf5565b60006020828403121561234e57600080fd5b8151611aa281612bf5565b6000806000806080858703121561236f57600080fd5b843567ffffffffffffffff8082111561238757600080fd5b818701915087601f83011261239b57600080fd5b813560206123ab61216c83612a34565b8083825282820191508286018c848660051b89010111156123cb57600080fd5b600096505b848710156123f75780356123e381612bf5565b8352600196909601959183019183016123d0565b509850508801359250508082111561240e57600080fd5b61241a8883890161214b565b9450604087013591508082111561243057600080fd5b61243c8883890161214b565b9350606087013591508082111561245257600080fd5b5061245f878288016121cd565b91505092959194509250565b6000602080838503121561247e57600080fd5b825167ffffffffffffffff81111561249557600080fd5b8301601f810185136124a657600080fd5b80516124b461216c82612a34565b80828252848201915084840188868560051b87010111156124d457600080fd5b600094505b838510156124f75780518352600194909401939185019185016124d9565b50979650505050505050565b60006020828403121561251557600080fd5b611aa2826121bd565b60008060008385036101e081121561253557600080fd5b6101a08082121561254557600080fd5b61254d6129d9565b9150612558866121bd565b8252612566602087016121bd565b602083015261257887604088016122a3565b604083015261258a876080880161223d565b606083015261010061259d81880161213b565b60808401526125af610120880161213b565b60a08401526125c1610140880161213b565b60c084015261016087015160e08401526101808701519083015285015190935091506125f06101c0850161213b565b90509250925092565b600060c0828403121561260b57600080fd5b60405160c0810181811067ffffffffffffffff8211171561262e5761262e612bdf565b604052823561263c81612bf5565b8152602083013561264c81612bf5565b6020820152604083013561265f81612bf5565b80604083015250606083013560608201526080830135608082015260a083013561268881612bf5565b60a08201529392505050565b6000806000606084860312156126a957600080fd5b6126b284612308565b92506126c060208501612308565b9150604084015163ffffffff811681146126d957600080fd5b809150509250925092565b6000602082840312156126f657600080fd5b5051919050565b60006020828403121561270f57600080fd5b815160ff81168114611aa257600080fd5b6000815180845260005b818110156127465760208185018101518683018201520161272a565b81811115612758576000602083870101525b50601f01601f19169290920160200192915050565b8051151582526020810151612786602084018215159052565b5060408101516127af604084018280516001600160a01b03908116835260209182015116910152565b5060608181015180516080850152602081015160a0850152604081015160c08501529081015160e08401525060808101516101006127f7818501836001600160a01b03169052565b60a08301516001600160a01b0390811661012086015260c08401511661014085015260e0830151610160850152909101516101809092019190915250565b6001600160a01b0385811682526080602080840182905286519184018290526000928782019290919060a0860190855b81811015612883578551851683529483019491830191600101612865565b5050858103604087015287518082529082019350915080870160005b838110156128bb5781518552938201939082019060010161289f565b5050505082810360608401526128d18185612720565b979650505050505050565b6040815260006128ef6040830185612720565b90508260208301529392505050565b815181526020808301519082015260408083015190820152606080830151908201526080810161199b565b6101a0810161199b828461276d565b6101e08101612947828661276d565b6101a08201939093526001600160a01b03919091166101c090910152919050565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156129b85784516001600160a01b031683529383019391830191600101612993565b50506001600160a01b03969096166060850152505050608001529392505050565b604051610120810167ffffffffffffffff811182821017156129fd576129fd612bdf565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612a2c57612a2c612bdf565b604052919050565b600067ffffffffffffffff821115612a4e57612a4e612bdf565b5060051b60200190565b60008219821115612a6b57612a6b612bb3565b500190565b600082612a8d57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115612acd578160001904821115612ab357612ab3612bb3565b80851615612ac057918102915b93841c9390800290612a97565b509250929050565b6000611aa28383600082612aeb5750600161199b565b81612af85750600061199b565b8160018114612b0e5760028114612b1857612b34565b600191505061199b565b60ff841115612b2957612b29612bb3565b50506001821b61199b565b5060208310610133831016604e8410600b8410161715612b57575081810a61199b565b612b618383612a92565b8060001904821115612b7557612b75612bb3565b029392505050565b6000816000190483118215151615612b9757612b97612bb3565b500290565b600082821015612bae57612bae612bb3565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461161657600080fdfe62616c616e63657343757272656e742e72657365727665314e6f726d616c697a65643a2062616c616e6365735461726765742e72657365727665314e6f726d616c697a65643a202062616c616e6365735461726765742e72657365727665304e6f726d616c697a65643a202062616c616e63657343757272656e742e72657365727665304e6f726d616c697a65643a20a26469706673582212202461e4d1c1bf339d4270ea5be59eac03004b5664010d9fb0005a7b6af22909ee64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "receiveFlashLoan(address[],uint256[],uint256[],bytes)": {
        "details": "When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient. At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the Vault, or else the entire flash loan will revert. `userData` is the same value passed in the `IVault.flashLoan` call."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}